import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'com.github.hierynomus.license' version '0.11.0'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

group 'com.github.jonathanxd'
version '1.0.16a'

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'license'
apply plugin: 'com.github.johnrengelman.shadow'

license {
    header rootProject.file("LICENSE_HEADER")
}

defaultTasks 'licenseFormat', 'build', 'test', 'jar', 'shadowJar', 'apOnlyJar'

sourceCompatibility = 1.8


repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven { url "http://dl.bintray.com/kotlin/kotlin-eap-1.1" }
}

configurations {
    apOnly
}

ext.bytecode_writer_version = '3.2.5-3.2.0-a'
ext.source_writer_version = '3.2.5-3.2.1'
ext.codeapi_version = '3.3.1-extra'
ext.jwiutils_version = '3.6.0'

dependencies {
    compile("com.github.JonathanxD:CodeAPI-BytecodeWriter:$bytecode_writer_version") { exclude module: "CodeAPI" }
    compile("com.github.JonathanxD:CodeAPI-SourceWriter:$source_writer_version") { exclude module: "CodeAPI" }
    compile "com.github.JonathanxD:CodeAPI:$codeapi_version"
    compile "com.github.JonathanxD:JwIUtils:$jwiutils_version"

    // Ap-only dependencies
    apOnly("com.github.JonathanxD:CodeAPI-SourceWriter:$source_writer_version")  { exclude module: "CodeAPI" }
    apOnly "com.github.JonathanxD:CodeAPI:$codeapi_version"
    apOnly "com.github.JonathanxD:JwIUtils:$jwiutils_version"

    testCompile "com.google.testing.compile:compile-testing:0.8"
    testCompile "junit:junit:4.12"
    testCompile files("${System.properties['java.home']}/../libs/tools.jar")
}

jar {
    from "$rootProject.rootDir/LICENSE"

    manifest {
        attributes 'Implementation-Title': baseName,
                'Implementation-Version': version
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task apOnlyJar(type: ShadowJar, dependsOn: classes) {
    classifier = 'ap'
    from sourceSets.main.output
    configurations = [project.configurations.apOnly]
}

shadowJar { // Relocate
    relocate 'com.github.jonathanxd.codeapi', 'com.github.jonathanxd.buildergenerator.codeapi'
    relocate 'com.github.jonathanxd.iutils', 'com.github.jonathanxd.buildergenerator.iutils'
    relocate 'org.objectweb.asm', 'com.github.jonathanxd.buildergenerator.asm'
    relocate 'com.google', 'com.github.jonathanxd.buildergenerator.com.google'
    relocate 'org.jetbrains', 'com.github.jonathanxd.buildergenerator.org.jetbrains'
    relocate 'org.intellij', 'com.github.jonathanxd.buildergenerator.org.intellij'
    relocate 'kotlin', 'com.github.jonathanxd.buildergenerator.kotlin'
}

apOnlyJar {
    relocate 'com.github.jonathanxd.codeapi', 'com.github.jonathanxd.buildergenerator.codeapi'
    relocate 'com.github.jonathanxd.iutils', 'com.github.jonathanxd.buildergenerator.iutils'
    relocate 'org.objectweb.asm', 'com.github.jonathanxd.buildergenerator.asm'
    relocate 'com.google', 'com.github.jonathanxd.buildergenerator.com.google'
    relocate 'org.jetbrains', 'com.github.jonathanxd.buildergenerator.org.jetbrains'
    relocate 'org.intellij', 'com.github.jonathanxd.buildergenerator.org.intellij'
    relocate 'kotlin', 'com.github.jonathanxd.buildergenerator.kotlin'
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives shadowJar
    archives apOnlyJar
}

license {
    ext.name = project.name
    ext.description = project.description
    ext.organization = project.organization
    ext.url = project.url
    ext.year = Calendar.getInstance().get(Calendar.YEAR)

    exclude "**/*.info"
    exclude "**/*.md"
    exclude "res/**"
    exclude "src/main/resources/**"
    exclude "src/test/resources/**"

    header rootProject.file('LICENSE_HEADER')

    sourceSets = project.sourceSets

    ignoreFailures false
    strictCheck true

    mapping {
        java = 'SLASHSTAR_STYLE'
        kt = 'SLASHSTAR_STYLE'
    }
}

